from pathlib import Path
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.exceptions import InvalidSignature

# Signing messages
def sign(message, private_key):
    return private_key.sign(
        message,
        padding.PSS(
            mgf=padding.MGF1(hashes.SHA256()),
            salt_length=padding.PSS.MAX_LENGTH
        ),
        hashes.SHA256()
    )

# Verifying signature
def verify(signature, message, public_key):
    try:
        public_key.verify(
            signature,
            message,
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )
        return "The message has been successfully verified"
    except InvalidSignature:
        return "The signature, the message, or the Public Key is invalid"

if __name__ == '__main__':
    print('|[ Generating Asymmetric Keys ]|')
    
    # Generating keys
    key_size = 2048  # Should be at least 2048

    private_key = rsa.generate_private_key(
        public_exponent=65537,  # Do not change
        key_size=key_size,
    )

    public_key = private_key.public_key()
    
    # Storing private key
    password = b"my secret"
    key_pem_bytes = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,  # PEM Format is specified
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.BestAvailableEncryption(password),
    )

    key_pem_path = Path("private_key.pem")
    key_pem_path.write_bytes(key_pem_bytes)
    
    # Storing public key
    public_pem_bytes = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo,
    )

    public_pem_path = Path("public_key.pem")
    public_pem_path.write_bytes(public_pem_bytes)
    
    print('\nUse sign(message, private_key) and verify(signature, message, public_key) to sign and verify the integrity of a message')
    print('Send the signature generated by sign(message, private_key) along the signed JSON to be able to verify it later')
    
    print('\n|[ Example of using sign and verify ]|[')
    
    message = b"Test message"
    print('Message: ' + str(message))

    signature = sign(message, private_key)
    print(f"Digital Signature: {signature.hex()}")
    
    verification_message = verify(signature, message, public_key)
    print(verification_message)
        
    print('\n|[ Check private_key.pem and public_key.pem for the key pair ]|')
